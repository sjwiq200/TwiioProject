<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TransactionMapper">
 	
 	
	<resultMap id="transactionSelectMap" type="transaction">
		<result property="tranNo" 					column="tran_no" 				jdbcType="NUMERIC"/>
		<result property="regDate"					column="tran_date" 				jdbcType="DATE" />
		<result property="tripDate" 				column="trip_date" 				jdbcType="DATE" />
		<result property="requirement" 				column="requirement" 			jdbcType="VARCHAR" />
		<result property="paymentType" 				column="pay_type" 				jdbcType="CHAR" />
		<result property="tranPro.productNo" 		column="product_no" 			jdbcType="NUMERIC" />
		<result property="tranPro.hostNo" 			column="host_no" 				jdbcType="NUMERIC" />
		<result property="count" 					column="tran_count" 			jdbcType="NUMERIC" />
		<result property="tranPro.productPrice" 	column="product_price" 			jdbcType="NUMERIC" />
		<result property="buyerNo" 					column="user_no" 				jdbcType="NUMERIC" />
		<result property="refundCode" 				column="refund_code" 			jdbcType="CHAR" />
		<result property="payToHostDate" 			column="pay_to_host_date" 		jdbcType="DATE" />
		<result property="totalPrice" 				column="tran_price" 			jdbcType="NUMERIC" />
		<result property="starEvalHost" 			column="host_star_eval" 		jdbcType="NUMERIC" />
		<result property="reviewHost" 				column="host_review" 			jdbcType="VARCHAR" />
		<result property="starEvalProduct" 			column="product_star_eval" 		jdbcType="NUMERIC" />
		<result property="reviewProduct" 			column="product_review" 		jdbcType="VARCHAR" />
		<result property="evalProduct" 				column="eval_product" 			jdbcType="NUMERIC" />
		<result property="evalHost" 				column="eval_host" 				jdbcType="NUMERIC" />
		<result property="userName" 				column="user_name" 				jdbcType="VARCHAR" />
		<result property="hostName" 				column="host_name" 				jdbcType="VARCHAR" />			
	</resultMap>
	
	<resultMap id="refundSelectMap" type="refund">
		<result property="refundNo" 				column="refund_no" 				jdbcType="NUMERIC"/>
		<result property="tranNo" 					column="tran_no" 				jdbcType="NUMERIC"/>
		<result property="regDate"					column="refund_reg_date" 		jdbcType="NUMERIC" />
		<result property="confirmDate" 				column="refund_confirm_date" 	jdbcType="VARCHAR" />
		<result property="refundPrice" 				column="refund_price" 			jdbcType="CHAR" />
		<result property="refundAccount" 			column="refund_account" 		jdbcType="VARCHAR" />
		<result property="refundBank" 				column="refund_bank" 			jdbcType="VARCHAR" />
		<result property="userNo" 					column="user_no" 				jdbcType="NUMERIC" />
		<result property="hostNo" 					column="host_no" 				jdbcType="NUMERIC" />			
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addTransaction"		parameterType="transaction" >
	 	INSERT
		INTO transaction( tran_no , trip_date , requirement, pay_type , product_no, host_no, tran_count, product_price, user_no, refund_code, pay_to_host_date, tran_price) 
		VALUES	 (	seq_TRANSACTION_TRAN_NO.NEXTVAL ,					
					#{tripDate} , 
					#{requirement:VARCHAR} , 
					#{paymentType} , 
					#{tranPro.productNo} ,
					#{tranPro.hostNo} ,
					#{count} ,
					#{tranPro.productPrice} ,
					#{buyerNo} ,
					1 ,
					#{payToHostDate} ,
					#{totalPrice} )
	 </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getTransaction"	parameterType="int"	resultMap="transactionSelectMap">
		SELECT
		tran_no , tran_date , trip_date , requirement, pay_type , product_no, host_no, tran_count, product_price, user_no, refund_code, pay_to_host_date, tran_price 		
		FROM transaction 
		WHERE tran_no = #{value}
	 </select>
	 
	 <!-- <select 	id="getPurchase2"	parameterType="int"	resultMap="transactionSelectMap">
		SELECT
		tran_no , prod_no , buyer_id , payment_option , receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date 		
		FROM transaction 
		WHERE prod_no = #{value}
	 </select> -->
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateTransactionCode"	parameterType="transaction" >
	   	UPDATE transaction
	   	<set>	   		
			refund_code		= #{refundCode}
	   	</set>
	   	WHERE tran_no = #{tranNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="listTransaction"  parameterType="map"	resultMap="transactionSelectMap">
		SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT 
									  	tran_no , tran_date , trip_date , requirement, pay_type , product_no, host_no, tran_count, product_price, user_no, tran_price, refund_code
									  	FROM transaction
									  	<where>
										  	<if test="user.userType == 1">
							 					user_no= #{user.userNo}
							 				</if>
							 				<if test="user.userType == 2">
							 					host_no= #{user.userNo}
							 				</if>
						 				</where>								  	 
									  	ORDER BY tran_date DESC
									 ) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}
	 </select>
	 
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<insert 	id="addRefund"		parameterType="refund" >
	 	INSERT
		INTO refund( refund_no , tran_no , refund_reg_date , refund_price , refund_account, refund_bank) 
		VALUES	 (	seq_REFUND_REFUND_NO.NEXTVAL , 
					#{tran_no} , 
					SYSDATE , 
					#{refundPrice} , 
					#{refundAccount} , 
					#{refundBank} )
	 </insert>
	
	<update id="updateRefund" parameterType="refund">
		UPDATE refund 
		SET 
			refund_confirm_date=#{confirmDate} 
		WHERE refund_no=#{refundNo}	
	</update>
	
	<!-- SQL : SELECT LIST -->
	<select  id="listRefund"  parameterType="map"	resultMap="refundSelectMap">
		SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT r.tran_no as tran_no,
											   r.refund_no as refund_no,
											   r.refund_reg_date as refund_reg_date,
											   r.refund_confirm_date as refund_confirm_date,
											   r.refund_price as refund_price,
											   r.refund_account as refund_account,
											   r.refund_bank as refund_bank,
											   t.user_no as user_no,
											   t.host_no as host_no
									FROM refund r, transaction t
									WHERE r.tran_no=t.tran_no
									<if test="user.userType==1">AND user_no=#{user.userNo}</if>
									<if test="user.userType==2">AND host_no=#{user.userNo}</if>									
									ORDER BY refund_reg_date DESC
									 ) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}
	 </select>
	
	<delete id="deleteRefund" parameterType="int">
		DELETE 
		FROM refund 
		WHERE refund_no=#{value}	
	</delete>
		 
	 <update id="addStarEvalProduct" parameterType="transaction">
		UPDATE transaction 
		<set> 
			product_star_eval	= #{starEvalProduct} ,
			product_review		= #{reviewProduct}
		</set>
		WHERE tran_no=#{tranNo}	
	</update>
	
	<!-- SQL : SELECT LIST -->
	<select  id="listStarEval"  parameterType="map"	resultMap="transactionSelectMap">
		SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT
	  										t.product_no as product_no , 
	  										t.tran_no as tran_no , 
	  										t.tran_date as tran_date , 
	  										t.trip_date as tran_date , 
	  										t.host_no as host_no , 
											t.tran_count as tran_count , 
											t.user_no as user_no , 
											t.product_star_eval as product_star_eval , 
											t.product_review as product_review ,
	  									<if test="evalType == product">	  										
											u.user_name as user_name							 				
							 			</if>
							 			<if test="evalType == host">
							 				u.user_name as host_name
							 			</if>									  	
									  	FROM transaction t, users u
									  	<where>								  	
											<if test="evalType == product">
								 				product_no= #{productNo}
								 			</if>
								 			<if test="evalType == host">
								 				host_no= #{hostNo}
								 			</if>
							 			</where>					 												  	 
									  	ORDER BY tran_date DESC
									 ) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}
	 </select>	 
	 	 
	 <update id="addStarEvalHost" parameterType="transaction">
		UPDATE transaction 
		<set> 
			host_star_eval	= #{starEvalHost} ,
			host_review		= #{reviewHost}
		</set>
		WHERE tran_no = #{tran_no}	
	</update>
	 
	 <select 	id="getEval"	parameterType="map"	resultMap="transactionSelectMap">
		SELECT
		<if test="evalType == product">AVG(product_star_eval) as eval_product</if>
		<if test="evalType == host">AVG(host_star_eval) eval_host</if>		
		FROM transaction
		<where>
			<if test="evalType == product">product_no = #{productNo}</if>
			<if test="evalType == host">host_no = #{hostNo}</if>
		</where>		
	 </select>
	 
	 <!-- SQL : SELECT LIST -->
	<select  id="listBest"  parameterType="map"	resultMap="transactionSelectMap">
		SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT
	  									<if test="evalType == product">
							 				product_no, AVG(product_star_eval) as product_eval
							 			</if>
							 			<if test="evalType == host">
							 				host_no, AVG(host_star_eval) as host_eval
							 			</if>									  	
									  	FROM transaction
									  	<if test="evalType == product">
								 			GROUP BY product_no ORDER BY product_eval DESC
								 		</if>
								 		<if test="evalType == host">
								 			GROUP BY host_no ORDER BY host_eval DESC
								 		</if>
									 ) inner_table
						WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}
	 </select>	 
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="map"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT
	  			<choose>
	  				<when test="user.userType == 3 or user.userType == 2 or user.userType == 3">
	  										   r.tran_no as tran_no,
											   r.refund_no as refund_no,
											   r.refund_reg_date as refund_reg_date,
											   r.refund_confirm_date as refund_confirm_date,
											   r.refund_price as refund_price,
											   r.refund_account as refund_account,
											   r.refund_bank as refund_bank,
											   t.user_no as user_no,
											   t.host_no as host_no
									FROM refund r, transaction t
									WHERE r.tran_no=t.tran_no									
					</when>
	  				<otherwise>tran_no , tran_date , trip_date , requirement, pay_type , product_no, host_no, tran_count, product_price, user_no, tran_price
							FROM transaction
					</otherwise>
	  			</choose>
	  			<choose>												 
				<when test="user.userType == 1">
					AND user_no=#{user.userNo}
					ORDER BY refund_reg_date DESC
				</when>
				<when test="user.userType == 2">
					AND host_no=#{user.userNo}
					ORDER BY refund_reg_date DESC
				</when>
				<otherwise>
					ORDER BY tran_date DESC
				</otherwise>				
				</choose>
			 ) countTable						
	 </select>
	 
</mapper>