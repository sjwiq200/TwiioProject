<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
 	
 	
	<resultMap id="userSelectMap" type="user">
		<result property="userId" 			column="user_id" 			jdbcType="VARCHAR"/>
		<result property="userName"			column="user_name" 			jdbcType="VARCHAR" />
		<result property="userEmail" 		column="email" 				jdbcType="VARCHAR" />
		<result property="userGender" 		column="gender" 			jdbcType="CHAR" />
		<result property="userPassword" 	column="password" 			jdbcType="VARCHAR" />
		<result property="userBirthday" 	column="birth" 				jdbcType="DATE" />
		<result property="userPhone" 		column="phone" 				jdbcType="VARCHAR"  />
		<result property="userAccount" 		column="host_account" 		jdbcType="VARCHAR" />
		<result property="userType" 		column="user_type" 			jdbcType="CHAR"  />
		<result property="userRegisterType" column="sign_up_type" 		jdbcType="CHAR"  />
		<result property="userImage" 		column="profile_image" 		jdbcType="VARCHAR"  />
		<result property="userBank" 		column="bank" 				jdbcType="VARCHAR"  />
		<result property="regDate" 			column="reg_date" 			jdbcType="DATE" />
		<result property="profilePublic" 	column="public_state" 		jdbcType="CHAR" />
		<result property="userLeave" 		column="resign" 			jdbcType="CHAR" />
		<result property="userNo" 			column="user_no" 			jdbcType="NUMERIC" />
	</resultMap>
	
	<resultMap id="userEvalSelectMap" type="userEval">
		<result property="scheduleNo" 		column="schedule_no" 		jdbcType="NUMERIC"/>
		<result property="profileTnF"		column="profile_credit" 	jdbcType="NUMERIC" />
		<result property="attendanceTnF" 	column="attendance" 		jdbcType="NUMERIC" />
		<result property="userNo"			column="user_no" 			jdbcType="NUMERIC" />
		<result property="targetNo" 		column="target_no" 			jdbcType="NUMERIC" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addUser"		parameterType="user" >
	 	INSERT
		INTO users( user_no, user_id , user_name , password , user_type , profile_image, phone, gender, email , reg_date, birth, sign_up_type) 
		VALUES	 ( seq_users_user_no.nextval , 
					#{userId} , 
					#{userName} , 
					#{password:VARCHAR} , 
					1 , 
					#{userImage:VARCHAR} , 
					#{userPhone:VARCHAR} , 
					#{userGender:VARCHAR} , 
					#{userEmail:VARCHAR} , 
					SYSDATE , 
					#{userBirthday:VARCHAR} , 
					#{userRegisterType} )
	 </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUser"	parameterType="string"	resultMap="userSelectMap">
		SELECT
		user_no , user_id , user_name , password , user_type , profile_image, phone, gender, email , reg_date, birth, sign_up_type, public_state, resign, host_account, bank	
		FROM users 
		WHERE user_id = #{value}
	 </select>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUserInNo"	parameterType="int"	resultMap="userSelectMap">
		SELECT
		user_no , user_id , user_name , password , user_type , profile_image, phone, gender, email , reg_date, birth, sign_up_type, public_state, resign, host_account, bank	
		FROM users 
		WHERE user_no = #{value}
	 </select>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="findId"	parameterType="user"	resultType="string">
		SELECT
		user_id 		
		FROM users 
		WHERE user_name = #{userName} AND email = #{userEmail}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="findPassword"	parameterType="user" >
	   	UPDATE users
	   	<set>	   		
			password				=	#{userPassword}
	   	</set>
	   	WHERE user_name = #{userName} AND email = #{userEmail} AND user_id = #{userId}
	 </update>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateUser"	parameterType="user" >
	   	UPDATE users
	   	<set>
	   		user_name 	= #{userName} ,
			phone	= #{userPhone},
			password 				= #{userPassword} ,
			profile_image 				= #{userImage} ,
			gender 				= #{userGender} ,
			birth 				= #{userBirthday} ,
			public_state 				= #{profilePublic} ,
			host_account 				= #{userAccount} ,
			bank 				= #{userBank} ,
			user_type 				= #{userType}		
	   	</set>
	   	WHERE user_no = #{userNo}
	 </update>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="deleteUser"	parameterType="user" >
	   	UPDATE users
	   	<set>	   		
			resign				=	#{userLeave}
	   	</set>
	   	WHERE user_no = #{userNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="listUser"  parameterType="search"	resultMap="userSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT user_id , user_name , password , user_type , profile_image, phone, gender, email , reg_date, birth, sign_up_type, 
	  											public_state, resign, host_account, bank
											FROM users
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				user_name = '${searchKeyword}%'
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				user_no = #{searchKeyword}
													</if>
												</where>
											</if>
											ORDER BY user_no ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	 
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT user_id , user_name , password , user_type , profile_image, phone, gender, email , reg_date, birth, sign_up_type, 
	  					public_state, resign, host_account, bank
						FROM users
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
						 			user_name LIKE '${searchKeyword}%'
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
						 		user_no = #{searchKeyword}
								</if>
							</where>
						</if> ) countTable						
	 </select>
	 
	 <insert	id="addEvalUser"  parameterType="map" >
	   INSERT INTO	usereval
	   	(user_eval_no, schedule_no, profile_credit, attendance, user_no, target_no )
		VALUES(seq_usereval_user_eval_no.nextval, #{scheduleNo}, #{tagetUser.profileTnF}, #{tagetUser.attendanceTnF}, #{tagetUser.userId},
		#{evalUser.userId})
	</insert>
	
	<select 	id="getEvalUser"	parameterType="string"	resultMap="userEvalSelectMap">
		SELECT
		ROUND(AVG(profile_credit),2)*100, ROUND(AVG(attendance),2)*100	
		FROM usereval 
		WHERE target_no = #{value}
	</select>
	 
</mapper>